#define task 10#define machine 3#include <iostream>#include <climits>using namespace std;void BackTrack(int j);int getTime(int time_Machine[]);void output_Assignment(int best_x[]);//所有数组下标从1开始int x[task + 1];//x[i]表示给任务i分配机器x[i]int best_x[task+1];//存储最优分配方案int min_t=INT_MAX;//执行任务所需的最小时间int t[task + 1] = {0,2,11,6,3,1,5,2,7,8,4};//每个任务所需时间int time_Machine[machine + 1] = {0};//每个机器运行结束的时间int main() {        BackTrack(1);        cout << "the time of the task is:" << endl;        for (int i = 1; i <= task; i++)   cout << t[i] << " ";        cout << endl;        cout << "the shortest time is:"<<min_t << endl;        output_Assignment(best_x);        return 0;}void BackTrack(int j) {        if (j > task) {                int cur_time = getTime(time_Machine);//当前已分配任务的完成时间                if (cur_time < min_t) { //剪枝                        min_t = cur_time;                        for (int i = 1; i <=task; i++)                                best_x[i] = x[i];                }        }        else{                for (int i = 1; i <= machine; i++) {                x[j] = i;                time_Machine[i] += t[j];                if(time_Machine[i]<min_t)                        BackTrack(j+1);                time_Machine[i] -= t[j];                }        }}int getTime(int time_Machine[]) {        int max_time=time_Machine[1];        for (int i = 2; i <= machine; i++) {                if (time_Machine[i] > max_time)                        max_time = time_Machine[i];        }        return max_time;}void output_Assignment(int best_x[]) {        for (int i = 1; i <= task; i++)                cout << "task" << i << " gives to the machine" << best_x[i] << endl;}
